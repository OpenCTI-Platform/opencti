version: 2.1
orbs:
  slack: circleci/slack@4.13.3
  ms-teams: cloudradar-monitoring/ms-teams@0.0.1
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  build_frontend:
    working_directory: ~/opencti
    docker:
      - image: nikolaik/python-nodejs:python3.10-nodejs18
    resource_class: large
    steps:
      - run:
          command: apt-get update --allow-insecure-repositories --allow-unauthenticated && apt-get install -y build-essential libffi-dev curl
      - checkout
      - run:
          working_directory: ~/opencti/opencti-platform/opencti-front
          command: yarn install
      - run:
          working_directory: ~/opencti/opencti-platform/opencti-front
          command: yarn build
          no_output_timeout: 30m
      - run:
          working_directory: ~/
          command: cp -a opencti opencti_docker && cp -a opencti opencti_musl
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
      - persist_to_workspace:
          root: ~/
          paths:
            - opencti
            - opencti_docker
            - opencti_musl

  build_platform:
    working_directory: ~/opencti
    docker:
      - image: nikolaik/python-nodejs:python3.10-nodejs18
    resource_class: medium+
    steps:
      - run:
          command: apt-get update --allow-insecure-repositories --allow-unauthenticated && apt-get install -y build-essential libffi-dev curl g++ make python3 python3-dev
      - run:
          command: npm install -g node-gyp
      - attach_workspace:
          at: ~/
      - run:
          working_directory: ~/opencti/opencti-platform/opencti-graphql
          command: yarn install
      - run:
          working_directory: ~/opencti/opencti-platform/opencti-graphql
          command: yarn build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
      - persist_to_workspace:
          root: ~/
          paths:
            - opencti

  build_platform_musl:
    working_directory: ~/opencti_musl
    docker:
      - image: nikolaik/python-nodejs:python3.10-nodejs18-alpine
    resource_class: medium+
    steps:
      - run:
          command: apk update && apk upgrade && apk --no-cache add git tini gcc g++ make musl-dev python3 python3-dev postfix postfix-pcre build-base libmagic libffi-dev curl
      - run:
          command: npm install -g node-gyp
      - attach_workspace:
          at: ~/
      - run:
          working_directory: ~/opencti_musl/opencti-platform/opencti-graphql
          command: yarn install
      - run:
          working_directory: ~/opencti_musl/opencti-platform/opencti-graphql
          command: yarn build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
      - persist_to_workspace:
          root: ~/
          paths:
            - opencti_musl

  tag_package_rolling:
    working_directory: ~/opencti
    docker:
      - image: circleci/node:current
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run: mkdir release
      - run: rm -Rf ./opencti-platform/opencti-graphql/.yarn/cache
      - run: cp -a ./opencti-platform/opencti-graphql release/opencti
      - run: cp -a ./opencti-worker/src release/opencti/worker
      - run: cd release/opencti && git clone --single-branch --branch ${CIRCLE_TAG} https://github.com/OpenCTI-Platform/client-python
      - run: cd release/opencti && git clone --single-branch --branch ${CIRCLE_TAG} https://github.com/OpenCTI-Platform/connectors
      - run:
          working_directory: ~/opencti/release
          command: tar -zcvf "opencti-${CIRCLE_TAG}.tar.gz" opencti
      - run:
          working_directory: ~/opencti/release
          command: curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T opencti-${CIRCLE_TAG}.tar.gz "https://filigran.jfrog.io/artifactory/opencti/opencti-${CIRCLE_TAG}.tar.gz"
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  package_rolling:
    working_directory: ~/opencti
    docker:
      - image: circleci/node:current
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run: mkdir release
      - run: rm -Rf ./opencti-platform/opencti-graphql/.yarn/cache
      - run: cp -a ./opencti-platform/opencti-graphql release/opencti
      - run: cp -a ./opencti-worker/src release/opencti/worker
      - run: cd release/opencti && git clone https://github.com/OpenCTI-Platform/docker
      - run: cd release/opencti && git clone https://github.com/OpenCTI-Platform/connectors
      - run:
          working_directory: ~/opencti/release
          command: tar -zcvf "opencti-$(date '+%Y%m%d').tar.gz" opencti
      - run:
          working_directory: ~/opencti/release
          command: curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T opencti-$(date '+%Y%m%d').tar.gz "https://filigran.jfrog.io/artifactory/opencti/opencti-$(date '+%Y%m%d').tar.gz"
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  package_rolling_musl:
    working_directory: ~/opencti_musl
    docker:
      - image: circleci/node:current
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys
      - run: sudo apt-get update -qq && sudo apt install curl
      - run: mkdir release
      - run: rm -Rf ./opencti-platform/opencti-graphql/.yarn/cache
      - run: cp -a ./opencti-platform/opencti-graphql release/opencti
      - run: cp -a ./opencti-worker/src release/opencti/worker
      - run: cd release/opencti && git clone https://github.com/OpenCTI-Platform/docker
      - run: cd release/opencti && git clone https://github.com/OpenCTI-Platform/connectors
      - run:
          working_directory: ~/opencti_musl/release
          command: tar -zcvf "opencti-$(date '+%Y%m%d')_musl.tar.gz" opencti
      - run:
          working_directory: ~/opencti_musl/release
          command: curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T opencti-$(date '+%Y%m%d')_musl.tar.gz "https://filigran.jfrog.io/artifactory/opencti/opencti-$(date '+%Y%m%d')_musl.tar.gz"
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  tag_package_rolling_musl:
    working_directory: ~/opencti_musl
    docker:
      - image: circleci/node:current
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys
      - run: sudo apt-get update -qq && sudo apt install curl
      - run: mkdir release
      - run: rm -Rf ./opencti-platform/opencti-graphql/.yarn/cache
      - run: cp -a ./opencti-platform/opencti-graphql release/opencti
      - run: cp -a ./opencti-worker/src release/opencti/worker
      - run: cd release/opencti && git clone --single-branch --branch ${CIRCLE_TAG} https://github.com/OpenCTI-Platform/client-python
      - run: cd release/opencti && git clone --single-branch --branch ${CIRCLE_TAG} https://github.com/OpenCTI-Platform/connectors
      - run:
          working_directory: ~/opencti_musl/release
          command: tar -zcvf "opencti-${CIRCLE_TAG}_musl.tar.gz" opencti
      - run:
          working_directory: ~/opencti_musl/release
          command: curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T opencti-${CIRCLE_TAG}_musl.tar.gz "https://filigran.jfrog.io/artifactory/opencti/opencti-${CIRCLE_TAG}_musl.tar.gz"
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_platform:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-platform
          name: Build Docker image opencti/platform
          command: |
            LATEST_SEMANTIC_VERSION=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
            DOCKER_TAGS="-t opencti/platform:${CIRCLE_TAG}"
            [ "$CIRCLE_TAG" = "$LATEST_SEMANTIC_VERSION" ] && DOCKER_TAGS="$DOCKER_TAGS -t opencti/platform:latest"
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -f Dockerfile_circleci $DOCKER_TAGS --push .
            GHCR_TAGS="-t ghcr.io/opencti-platform/opencti/platform:${CIRCLE_TAG}"
            [ "$CIRCLE_TAG" = "$LATEST_SEMANTIC_VERSION" ] && GHCR_TAGS="$GHCR_TAGS -t ghcr.io/opencti-platform/opencti/platform:latest"
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -f Dockerfile_circleci $GHCR_TAGS --push .
          no_output_timeout: 30m
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_worker:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-worker
          name: Build Docker image opencti/worker
          command: |
            LATEST_SEMANTIC_VERSION=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
            DOCKER_TAGS="-t opencti/worker:${CIRCLE_TAG}"
            [ "$CIRCLE_TAG" = "$LATEST_SEMANTIC_VERSION" ] && DOCKER_TAGS="$DOCKER_TAGS -t opencti/worker:latest"
            docker buildx build --platform $BUILDX_PLATFORMS $DOCKER_TAGS --push .
            GHCR_TAGS="-t ghcr.io/opencti-platform/opencti/worker:${CIRCLE_TAG}"
            [ "$CIRCLE_TAG" = "$LATEST_SEMANTIC_VERSION" ] && GHCR_TAGS="$GHCR_TAGS -t ghcr.io/opencti-platform/opencti/worker:latest"
            docker buildx build --platform $BUILDX_PLATFORMS $GHCR_TAGS --push .
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_platform_fips:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-platform
          name: Build Docker image opencti/platform
          command: |
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -f Dockerfile_circleci_fips -t opencti/platform:latest-fips -t opencti/platform:${CIRCLE_TAG}-fips --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -f Dockerfile_circleci_fips -t ghcr.io/opencti-platform/opencti/platform:latest-fips -t ghcr.io/opencti-platform/opencti/platform:${CIRCLE_TAG}-fips --push .
          no_output_timeout: 30m
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_worker_fips:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-worker
          name: Build Docker image opencti/worker
          command: |
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -f Dockerfile_fips -t opencti/worker:latest-fips -t opencti/worker:${CIRCLE_TAG}-fips --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -f Dockerfile_fips -t ghcr.io/opencti-platform/opencti/worker:latest-fips -t ghcr.io/opencti-platform/opencti/worker:${CIRCLE_TAG}-fips --push .
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_platform_rolling:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Replace pycti requirement of stable version with latest master branch code
          command: find . -name requirements.txt -exec sed 's|^pycti==.*$|pycti @ git+https://github.com/OpenCTI-Platform/client-python@master|' -i {} \;
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-platform
          name: Build Docker image opencti/platform
          command: | 
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -f Dockerfile_circleci -t opencti/platform:rolling --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -f Dockerfile_circleci -t ghcr.io/opencti-platform/opencti/platform:rolling --push .
          no_output_timeout: 30m
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_worker_rolling:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Replace pycti requirement of stable version with latest master branch code
          command: find . -name requirements.txt -exec sed 's|^pycti==.*$|pycti @ git+https://github.com/OpenCTI-Platform/client-python@master|' -i {} \;
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-worker
          name: Build Docker image opencti/worker
          command: |
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -t opencti/worker:rolling --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -t ghcr.io/opencti-platform/opencti/worker:rolling --push .
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_platform_prerelease:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Replace pycti requirement of stable version with latest prerelease branch code
          command: find . -name requirements.txt -exec sed "s|^pycti==.*$|pycti @ git+https://github.com/OpenCTI-Platform/client-python@$PRE_RELEASE_VERSION|" -i {} \;
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-platform
          name: Build Docker image opencti/platform
          command: |
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -f Dockerfile_circleci -t opencti/platform:prerelease --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -f Dockerfile_circleci -t ghcr.io/opencti-platform/opencti/platform:prerelease --push .
          no_output_timeout: 30m
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_worker_prerelease:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Replace pycti requirement of stable version with latest release branch code
          command: find . -name requirements.txt -exec sed "s|^pycti==.*$|pycti @ git+https://github.com/OpenCTI-Platform/client-python@$PRE_RELEASE_VERSION|" -i {} \;
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-worker
          name: Build Docker image opencti/worker
          command: |
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -t opencti/worker:prerelease --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -t ghcr.io/opencti-platform/opencti/worker:prerelease --push .
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_platform_fips_rolling:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-platform
          name: Build Docker image opencti/platform
          command: |
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -f Dockerfile_circleci_fips -t opencti/platform:rolling-fips --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -f Dockerfile_circleci_fips -t ghcr.io/opencti-platform/opencti/platform:rolling-fips --push .
          no_output_timeout: 30m
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  docker_build_worker_fips_rolling:
    working_directory: ~/opencti_docker
    machine:
      image: ubuntu-2004:202111-02
      resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64
    steps:
      - attach_workspace:
          at: ~/
      - run: sudo apt-get update -qq && sudo apt install curl
      - run:
          name: Install buildx
          command: |
            BUILDX_BINARY_URL="https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64"
            curl --output docker-buildx \
              --silent --show-error --location --fail --retry 3 \
              "$BUILDX_BINARY_URL"
            mkdir -p ~/.docker/cli-plugins
            mv docker-buildx ~/.docker/cli-plugins/
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
            docker buildx create --name mybuilder --use
      - run:
          name: Login to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "$GHCR_PASS" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
      - run:
          working_directory: ~/opencti_docker/opencti-worker
          name: Build Docker image opencti/worker
          command: |
            docker buildx build --platform $BUILDX_PLATFORMS --cache-to=type=local,dest=.cache -f Dockerfile_fips -t opencti/worker:rolling-fips --push .
            docker buildx build --platform $BUILDX_PLATFORMS --cache-from=type=local,src=.cache -f Dockerfile_fips -t ghcr.io/opencti-platform/opencti/worker:rolling-fips --push .
      - slack/notify:
          event: fail
          template: basic_fail_1
      - ms-teams/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL

  deploy_testing:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN -n customer-testing rollout restart deployment -l app=opencti

  deploy_prerelease:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN_PRE_RELEASE -n customer-prerelease rollout restart deployment -l app=opencti

  deploy_dev:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN_DEV -n customer-dev rollout restart deployment -l app=opencti

  notify_rolling:
    docker:
      - image: "cimg/base:stable"
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl
      - slack/notify:
          event: pass
          template: basic_success_1
      - ms-teams/report:
          only_on_fail: false
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl
      - slack/notify:
          event: pass
          template: basic_success_1
      - ms-teams/report:
          only_on_fail: false
          webhook_url: $MS_TEAMS_WEBHOOK_URL

workflows:
  opencti:
    jobs:
      - build_frontend:
          filters:
            tags:
              only: /.*/
      - build_platform:
          filters:
            tags:
              only: /.*/
          requires:
            - build_frontend
      - build_platform_musl:
          filters:
            tags:
              only: /.*/
          requires:
            - build_frontend
      - package_rolling:
          requires:
            - build_platform
          filters:
            branches:
              only:
                - master
      - tag_package_rolling:
          requires:
            - build_platform
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - package_rolling_musl:
          requires:
            - build_platform_musl
          filters:
            branches:
              only:
                - master
      - tag_package_rolling_musl:
          requires:
            - build_platform_musl
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - docker_build_platform_rolling:
          requires:
            - build_frontend
          filters:
            branches:
              only:
                - master
      - docker_build_worker_rolling:
          requires:
            - build_frontend
          filters:
            branches:
              only:
                - master
      - docker_build_platform_prerelease:
          requires:
            - build_frontend
          filters:
            branches:
              only:
                - /release\/.*/
      - docker_build_worker_prerelease:
          requires:
            - build_frontend
          filters:
            branches:
              only:
                - /release\/.*/
      - docker_build_platform_fips_rolling:
          requires:
            - build_frontend
          filters:
            branches:
              only:
                - master
      - docker_build_worker_fips_rolling:
          requires:
            - build_frontend
          filters:
            branches:
              only:
                - master
      - docker_build_platform:
          requires:
            - build_frontend
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - docker_build_worker:
          requires:
            - build_frontend
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - docker_build_platform_fips:
          requires:
            - build_frontend
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - docker_build_worker_fips:
          requires:
            - build_frontend
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - deploy_testing:
          requires:
            - docker_build_platform_rolling
            - docker_build_worker_rolling
      - deploy_prerelease:
          requires:
            - docker_build_platform_prerelease
            - docker_build_worker_prerelease
      - deploy_dev:
          requires:
            - docker_build_platform_prerelease
            - docker_build_worker_prerelease
      - notify_rolling:
          requires:
            - deploy_testing
            - deploy_prerelease
            - deploy_dev
            - docker_build_platform_fips_rolling
            - docker_build_worker_fips_rolling
            - package_rolling
            - package_rolling_musl
      - notify:
          requires:
            - docker_build_platform
            - docker_build_worker
            - docker_build_platform_fips
            - docker_build_worker_fips
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
