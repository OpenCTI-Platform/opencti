name: OpenCTI CI GitHub hosted api-test
on:
  workflow_dispatch:
  push:
    branches:
      - oob/ci-split-test

jobs:
  Job-OpenCTI-CI:
    runs-on: ubuntu-latest
    steps:
    - name: Display Runner Information
      continue-on-error: true
      run: |
          set -x
          echo "Runner Name: $RUNNER_NAME"
          echo "Runner OS: $RUNNER_OS \t Runner Arch: $RUNNER_ARCH"
          echo "Workflow: ${{ github.workflow }} \t Run ID: ${{ github.run_id }} \t Run Number: ${{ github.run_number }}"
          echo "Workspace  GITHUB_WORKSPACE =  ${GITHUB_WORKSPACE} "
          tree  ${{ github.workspace }}/..
          echo " pwd $(pwd) " 
          ls -larth
          ps aux | sort -nk +4 | tail -5
          env
          free -m
          docker stats --no-stream

    - name: OpenCTI checkout
      uses: actions/checkout@v4

    - name: Run the dependency checkout with docker run
      run: |
        docker run \
          --name depndency-checkout \
          -v ${{ github.workspace }}:${{ github.workspace }} \
          -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
          -e GITHUB_REF_NAME=${GITHUB_REF_NAME} \
          -e GITHUB_BASE_REF=${GITHUB_BASE_REF} \
          -e GITHUB_PR_NUMBER=${{ github.event.pull_request.number }} \
          nikolaik/python-nodejs:python3.11-nodejs22-alpine \
          sh -c 'set -x
            echo "Runner Name= $RUNNER_NAME"
            echo "$(date) dependencies-checkout" 
            echo "Workspace  github.workspace  = ${{ github.workspace }}" 
            ls  ${{ github.workspace }} -larth  2>/dev/null || true 
            cd ${{ github.workspace }}
            cp -R opencti-platform platform-reference  
            apk add git github-cli 
            chmod 777 scripts/*   
            git config --global --add safe.directory ${{ github.workspace }} 
            echo Launching clonde-dependencies.sh   "${GITHUB_REF_NAME}" "${GITHUB_BASE_REF}" "$(pwd)" "${GITHUB_PR_NUMBER}" 
            ./scripts/clone-dependencies.sh  "${GITHUB_REF_NAME}" "${GITHUB_BASE_REF}" "$(pwd)" "${GITHUB_PR_NUMBER}" 
            ls -lart 
            cd client-python 
            echo "[INFO] using client-python on branch $(git branch --show-current)" 
            git log -n 1 
            '


#    - name: Run the dependency checkout  process with addnab  Dockeraction
#      uses: addnab/docker-run-action@v3
#      with:
#        image: nikolaik/python-nodejs:python3.11-nodejs22-alpine
#        options: -v ${{ github.workspace }}:${{ github.workspace }} -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
#        run: |
#          set -x ;
#          echo "Runner Name= $RUNNER_NAME"
#          echo "$(date) dependencies-checkout" ;
#          echo "Workspace  github.workspace  = ${{ github.workspace }}" ;
#          ls  ${{ github.workspace }} -larth  2>/dev/null || true ;
#          cd ${{ github.workspace }};
#          cp -R opencti-platform platform-reference ;
#          apk add git github-cli ;
#          chmod 777 scripts/* ;
#          git config --global --add safe.directory ${{ github.workspace }}
#          echo "Launching clonde-dependencies.sh "${GITHUB_REF_NAME}" "${GITHUB_BASE_REF}" "$(pwd)" "${{ github.event.pull_request.number }}" ;
#          ./scripts/clone-dependencies.sh  "${GITHUB_REF_NAME}" "${GITHUB_BASE_REF}" "$(pwd)" "${{ github.event.pull_request.number }}" ;
#          ls -lart ;
#          cd client-python ;
#          echo "[INFO] using client-python on branch $(git branch --show-current)" ;
#          git log -n 1 ;
#
#    - name: Test step with docker
#      continue-on-error: true
#      uses: docker://nikolaik/python-nodejs:python3.11-nodejs22-alpine
#      env:
#        MY_HELLO_VAR: "Hello"
#      with:
#        entrypoint: /bin/sh
#        args: -c 'echo "This is a test"'

    - name: Check memory and docker status
      run: |
          sleep 10
          echo -e "\n *********\n ********* free memory"; sleep 1
          free -m
          echo -e "\n *********\n ********* docker ps"; sleep 1
          docker ps
          echo -e "\n *********\n ********* docker stat"; sleep 1
          docker stats --no-stream        
          echo -e "\n *********\n ********* ps"; sleep 1
          ps aux | sort -nk +4 | tail -10

    - name: Start container raw-start
      run: |
        docker run -d \
          --name opencti-raw-start \
          -v ${{ github.workspace }}:/home/workspace \
          -e APP__PORT=4100 \
          -e APP__ADMIN__PASSWORD=admin \
          -e APP__ENABLED_DEV_FEATURES='["*"]' \
          -e APP__CHILD_LOCKING_PROCESS__ENABLED=false \
          -e APP__ADMIN__TOKEN=bfa014e0-e02e-4aa6-a42b-603b19dcf159 \
          -e APP__APP_LOG__EXTENDED_ERROR_MESSAGE=true \
          -e APP__HEALTH_ACCESS_KEY=cihealthkey \
          -e REDIS__HOSTNAME=redis \
          -e REDIS__NAMESPACE=raw-start \
          -e ELASTICSEARCH__URL=http://elastic:9200 \
          -e ELASTICSEARCH__INDEX_PREFIX=raw-start \
          -e MINIO__ENDPOINT=minio \
          -e MINIO__BUCKET_NAME=raw-start-bucket \
          -e RABBITMQ__HOSTNAME=rabbitmq \
          -e RABBITMQ__QUEUE_PREFIX=raw-start \
          -e EXPIRATION_SCHEDULER__ENABLED=false \
          -e SUBSCRIPTION_SCHEDULER__ENABLED=false \
          nikolaik/python-nodejs:python3.11-nodejs22-alpine \
          sh -c 'set -x 
            echo "Runner Name= $RUNNER_NAME" 
            echo "$(date) raw start"  
            cd /home/workspace
            ls -lart 
            sleep 1
            apk add build-base git libffi-dev cargo 
            mkdir -p /tmp/raw-start-platform/ 
            cp -a /home/workspace/platform-reference/* /tmp/raw-start-platform/ 
            ls -lart 
            sleep 1
            ls -lart /tmp/raw-start-platform/ 
            sleep 1
            cd client-python 
            pip install -r requirements.txt 
            pip install -e .[dev,doc] 
            sleep 1
            cd /tmp/raw-start-platform/opencti-graphql 
            yarn install 
            yarn install:python 
            echo -e "\n *********\n ********* STARTING OPENCTI INSTANCE"; sleep 1
            NODE_OPTIONS=--max_old_space_size=6000 yarn start && true 
            tail -f /dev/null 
            '



    - name: Check total memory usage
      continue-on-error: true
      run: |
          sleep 60
          echo -e "\n *********\n ********* free memory"; sleep 1
          free -m
          echo -e "\n *********\n ********* docker ps"; sleep 1
          docker ps
          echo -e "\n *********\n ********* docker stat"; sleep 1
          docker stats --no-stream        
          echo -e "\n *********\n ********* ps"; sleep 1
          ps aux | sort -nk +4 | tail -10
          echo -e "\n *********\n ********* logs Minio "; sleep 1
          docker logs $(docker ps -a --format '{{.ID}} {{.Image}}' | grep minio | awk '{print $1}')
          echo -e "\n *********\n ********* logs raw start "; sleep 1
          docker logs opencti-raw-start
        

        

    services:
      redis:
        image: redis:8.0.0
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elastic:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.18.2
        ports:
          - 9200:9200
        options: --health-cmd="curl http://localhost:9200/_cluster/health"
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms2g -Xmx2g
      minio:
        image: minio/minio:RELEASE.2023-07-07T07-13-57Z
        env:
          MINIO_ROOT_USER: ChangeMe
          MINIO_ROOT_PASSWORD: ChangeMe
      rabbitmq:
        image: rabbitmq:4.1-management
