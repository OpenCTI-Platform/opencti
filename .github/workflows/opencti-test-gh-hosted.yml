name: OpenCTI CI GitHub hosted api-test
on:
  workflow_dispatch:
  push:
    branches:
      - oob/ci-split-test

jobs:
  Job-OpenCTI-CI:
    runs-on: ubuntu-latest
    steps:
    - name: Display Runner Information
      continue-on-error: true
      run: |
          set -x
          echo "Runner Name: $RUNNER_NAME"
          echo "Runner OS: $RUNNER_OS \t Runner Arch: $RUNNER_ARCH"
          echo "Workflow: ${{ github.workflow }} \t Run ID: ${{ github.run_id }} \t Run Number: ${{ github.run_number }}"
          echo "Workspace  GITHUB_WORKSPACE =  ${GITHUB_WORKSPACE} "
          tree  ${{ github.workspace }}/..
          echo " pwd $(pwd) " 
          ls -larth
          ps aux | sort -nk +4 | tail -5
          env
          free -m
          docker stats --no-stream

    - name: OpenCTI checkout
      uses: actions/checkout@v4

    - name: Set up Docker Compose for backends
      run: |
         cd opencti-platform/opencti-ci 
         docker compose up -d


    - name: Run the dependency checkout with docker run
      run: |
        docker run \
          --name depndency-checkout \
          -v ${{ github.workspace }}:${{ github.workspace }} \
          -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
          -e GITHUB_REF_NAME=${GITHUB_REF_NAME} \
          -e GITHUB_BASE_REF=${GITHUB_BASE_REF} \
          -e GITHUB_PR_NUMBER=${{ github.event.pull_request.number }} \
          nikolaik/python-nodejs:python3.11-nodejs22-alpine \
          sh -c 'set -x
            echo "Runner Name= $RUNNER_NAME"
            echo "$(date) dependencies-checkout" 
            echo "Workspace  github.workspace  = ${{ github.workspace }}" 
            ls  ${{ github.workspace }} -larth  2>/dev/null || true 
            cd ${{ github.workspace }}
            cp -R opencti-platform platform-reference  
            apk add git github-cli 
            chmod 777 scripts/*   
            git config --global --add safe.directory ${{ github.workspace }} 
            echo Launching clonde-dependencies.sh   "${GITHUB_REF_NAME}" "${GITHUB_BASE_REF}" "$(pwd)" "${GITHUB_PR_NUMBER}" 
            ./scripts/clone-dependencies.sh  "${GITHUB_REF_NAME}" "${GITHUB_BASE_REF}" "$(pwd)" "${GITHUB_PR_NUMBER}" 
            ls -lart 
            cd client-python 
            echo "[INFO] using client-python on branch $(git branch --show-current)" 
            git log -n 1 
            '


    - name: Check memory and docker status
      run: |
          sleep 10
          echo -e "\n *********\n ********* free memory"; sleep 1
          free -m
          echo -e "\n *********\n ********* docker ps"; sleep 1
          docker ps -a
          echo -e "\n *********\n ********* docker stat"; sleep 1
          docker stats --no-stream        
          echo -e "\n *********\n ********* ps"; sleep 1
          ps aux | sort -nk +4 | tail -10

    - name: Start container raw-start
      run: |
        docker run -d \
          --name opencti-raw-start \
          -v "${{ github.workspace }}:/home/workspace" \
          nikolaik/python-nodejs:python3.11-nodejs22-alpine \
          sh -c '/home/workspace/opencti-platform/opencti-ci/start-opencti-instance.sh raw'


    - name: Check total memory usage
      continue-on-error: true
      run: |
          sleep 60
          echo -e "\n *********\n ********* free memory"; sleep 1
          free -m
          echo -e "\n *********\n ********* docker ps"; sleep 1
          docker ps -a
          echo -e "\n *********\n ********* docker stat"; sleep 1
          docker stats --no-stream        
          echo -e "\n *********\n ********* ps"; sleep 1
          ps aux | sort -nk +4 | tail -10
          echo -e "\n *********\n ********* logs Minio "; sleep 5
          docker logs $(docker ps -a --format '{{.ID}} {{.Image}}' | grep minio | awk '{print $1}')
          echo -e "\n *********\n ********* logs Elastic search "; sleep 5
          docker logs $(docker ps -a --format '{{.ID}} {{.Image}}' | grep elastic | awk '{print $1}')
          echo -e "\n *********\n ********* logs RabbitMQ "; sleep 5
          docker logs $(docker ps -a --format '{{.ID}} {{.Image}}' | grep rabbit | awk '{print $1}')
          echo -e "\n *********\n ********* logs Redis "; sleep 5
          docker logs $(docker ps -a --format '{{.ID}} {{.Image}}' | grep redis | awk '{print $1}')
          echo -e "\n *********\n ********* logs raw start "; sleep 1
          echo "$(date)"  
          docker logs opencti-raw-start
          sleep 60        
          echo -e "\n *********\n ********* logs raw start "; sleep 1
          echo "$(date) "  
          docker logs opencti-raw-start

        
#
#    services:
#      redis:
#        image: redis:8.0.0
#        ports:
#          - 6379:6379
#        # Set health checks to wait until redis has started
#        options: >-
#          --health-cmd "redis-cli ping"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#      elastic:
#        image: docker.elastic.co/elasticsearch/elasticsearch:8.18.2
#        ports:
#          - 9200:9200
#        options: --health-cmd="curl http://localhost:9200/_cluster/health"
#        env:
#          discovery.type: single-node
#          xpack.security.enabled: false
#          ES_JAVA_OPTS: -Xms2g -Xmx2g
#      minio:
#        image: minio/minio:RELEASE.2023-07-07T07-13-57Z
#        env:
#          MINIO_ROOT_USER: ChangeMe
#          MINIO_ROOT_PASSWORD: ChangeMe
#      rabbitmq:
#        image: rabbitmq:4.1-management
