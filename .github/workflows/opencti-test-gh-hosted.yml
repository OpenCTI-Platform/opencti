name: OpenCTI CI GitHub hosted api-test
on:
  workflow_dispatch:
  push:
    branches:
      - oob/ci-migrate-to-gh

jobs:
  build-opencti-platform:
    name: build-opencti-platform
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: filigran/platform
        tags: |
          type=sha,format=short
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: opencti-platform
        file: opencti-platform/Dockerfile_featurebranch
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-opencti-worker:
    name: build-opencti-worker
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: filigran/worker
        tags: |
          type=sha,format=short
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: opencti-worker
        file: opencti-worker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  run-opencti-test-stack:
    needs: build-opencti-platform
    runs-on: ubuntu-latest
    steps:
    - name: Display Runner Information
      continue-on-error: true
      run: |
          set -x
          echo "Runner Name: $RUNNER_NAME \n Runner OS: $RUNNER_OS \n Runner Arch: $RUNNER_ARCH"
          echo "Workflow: ${{ github.workflow }} \t Run ID: ${{ github.run_id }} \t Run Number: ${{ github.run_number }}"
          echo "Workspace  GITHUB_WORKSPACE =  ${GITHUB_WORKSPACE}  \t   github.workspace= ${{ github.workspace }} \t  pwd $(pwd) "
          ls -larth  ${{ github.workspace }}/.. 
          env
          free -m

    - name: OpenCTI checkout
      uses: actions/checkout@v4

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Compose for backends and sync instances
      run: |
         set -x
         cd opencti-platform/opencti-ci         
         export TAG=${{ needs.build-opencti-platform.outputs.version }}
         docker network create runner-docker-network
         docker compose up -d

    - name: Log backend start
      continue-on-error: true
      run: |
          sleep 20;
          echo -e "\n\n *********\n ********* logs Minio \n"; 
          docker logs minio
          echo -e "\n\n *********\n ********* logs Elastic search \n"; sleep 1
          docker logs elasticsearch
          echo -e "\n\n *********\n ********* logs RabbitMQ \n"; sleep 1
          docker logs rabbitmq
          echo -e "\n\n *********\n ********* logs Redis \n"; sleep 1
          docker logs redis
          
          echo -e "\n\n *********\n ********* test backend endpoint \n"; sleep 2
          set -x
          docker run --rm --network runner-docker-network curlimages/curl curl http://elasticsearch:9200
          docker run --rm --network runner-docker-network curlimages/curl curl http://redis:6379
          docker run --rm --network runner-docker-network curlimages/curl curl http://rabbitmq:5672
          docker run --rm --network runner-docker-network curlimages/curl curl http://elasticsearch:9200

    - name: Memory, container and process infos
      continue-on-error: true
      run: |
          echo -e "\n *********\n ********* docker ps"
          docker ps -a
          echo -e "\n *********\n ********* docker stat"
          docker stats --no-stream        
          echo -e "\n *********\n ********* ps"
          ps aux | sort -nk +4 | tail -10
          echo -e "\n *********\n ********* free memory"
          free -m
        

    - name: Wait for OpenCTI sync instances to start
      continue-on-error: true
      run: |
          set -x
          echo "$(date)"  
          cd opencti-platform/opencti-ci
          ./wait-for-opencsti-instance-startup.sh http://localhost:4100/health?health_access_key=cihealthkey 300 10
          ./wait-for-opencsti-instance-startup.sh http://localhost:4200/health?health_access_key=cihealthkey 180 10
          ./wait-for-opencsti-instance-startup.sh http://localhost:4300/health?health_access_key=cihealthkey 180 10
          ./wait-for-opencsti-instance-startup.sh http://localhost:4400/health?health_access_key=cihealthkey 180 10


    - name: Log backend
      continue-on-error: true
      run: |
          echo -e "\n\n *********\n ********* logs Minio \n"; 
          docker logs minio
          echo -e "\n\n *********\n ********* logs Elastic search \n"; sleep 1
          docker logs elasticsearch
          echo -e "\n\n *********\n ********* logs RabbitMQ \n"; sleep 1
          docker logs rabbitmq
          echo -e "\n\n *********\n ********* logs Redis \n"; sleep 1
          docker logs redis

    - name: Logs opencti start
      continue-on-error: true
      run: |
          echo -e "\n\n *********\n ********* Log OpenCTI DIRECT"; 
          echo "$(date)"  
          docker logs opencti-direct-start
          echo -e "\n\n *********\n ********* Log OpenCTI LIVE"; sleep 1
          echo "$(date)"  
          docker logs opencti-live-start
          echo -e "\n\n *********\n ********* Log OpenCTI RAW"; sleep 1
          echo "$(date)"  
          docker logs opencti-raw-start
          echo -e "\n\n *********\n ********* Log OpenCTI RESTORE"; sleep 1
          echo "$(date)"  
          docker logs opencti-restore-start


    - name: Monitor ressources usage in background
      run: |
        # Run docker stats every 60s and save to file
        while true; do
          echo "==== $(date) ====" >> docker_stats.log
          docker stats --no-stream >> docker_stats.log
          free -m >> docker_stats.log
          sleep 60
        done &
        # Save background PID
        echo $! > monitor.pid

    - name: Start api test
      run: |
        docker run --network runner-docker-network \
          --name api-test \
          -v ${{ github.workspace }}:/home/workspace" \
          -e APP__BASE_URL=http://api-tests:4010/ \
          -e APP__ADMIN__PASSWORD=admin \
          -e APP__CHILD_LOCKING_PROCESS__ENABLED=false \
          -e APP__ENTERPRISE_EDITION_LICENSE= ${{ secrets.EE_LICENSE }} \
          -e APP__SYNC_RAW_START_REMOTE_URI=http://opencti-raw-start:4100/graphql \
          -e APP__SYNC_LIVE_START_REMOTE_URI=http://opencti-live-start:4200/graphql \
          -e APP__SYNC_DIRECT_START_REMOTE_URI=http://opencti-direct-start:4300/graphql \
          -e APP__SYNC_RESTORE_START_REMOTE_URI=http://opencti-restore-start:4400/graphql \
          -e APP__ADMIN__TOKEN=bfa014e0-e02e-4aa6-a42b-603b19dcf159 \
          -e REDIS__HOSTNAME=redis \
          -e ELASTICSEARCH__URL=http://elasticsearch:9200 \
          -e MINIO__ENDPOINT=minio \
          -e RABBITMQ__HOSTNAME=rabbitmq \
          -e EXPIRATION_SCHEDULER__ENABLED=false \
          -e SUBSCRIPTION_SCHEDULER__ENABLED=false \
          -e SMTP__ENABLED=false \
          -e PYTHONUNBUFFERED=1  \
          nikolaik/python-nodejs:python3.11-nodejs22-alpine \
          sh -c 'set -x;
            echo -e "\n\n *********\n ********* Start OpenCTI API test";
            echo "$(ls /root/.yarn/berry/cache/ 2> /dev/null | wc -l || echo 0) packages in Yarn global cache";
            apk add build-base git libffi-dev cargo;
            cd /home/workspace/opencti-platform/opencti-graphql
            npm install -g corepack
            cp /home/workspace/opencti-platform/.yarnrc.yml .
            yarn install
            yarn build
            yarn check-ts
            yarn lint
            NODE_OPTIONS=--max_old_space_size=8192 yarn test
        '

    - name: Stop docker stats monitor and print logs
      if: always()
      run: |
        kill $(cat monitor.pid) || true
        echo "==== Docker stats log ===="
        cat docker_stats.log        

    - name: Memory, container and process infos
      continue-on-error: true
      run: |
          echo -e "\n *********\n ********* docker ps"
          docker ps -a
          echo -e "\n *********\n ********* docker stat"
          docker stats --no-stream        
          echo -e "\n *********\n ********* ps"
          ps aux | sort -nk +4 | tail -10
          echo -e "\n *********\n ********* free memory"
          free -m
