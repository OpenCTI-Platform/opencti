type PirCriterion {
    filters: String!
    weight: Int!
}

type PirScore {
    pir_id: ID!
    pir_score: Int!
}

# Used in StixRefRelationship
enum PirType {
    THREAT_LANDSCAPE
    THREAT_ORIGIN
    THREAT_CUSTOM
}

type PirDependency {
    element_id: ID!
    author_id: ID
}
type PirExplanation {
    dependencies: [PirDependency!]!
    criterion: PirCriterion!
}

type Pir implements InternalObject & BasicObject {
    id: ID!
    entity_type: String!
    standard_id: String!
    parent_types: [String!]!
    created_at: DateTime!
    updated_at: DateTime!
    creators: [Creator!]
    # Pir
    name: String!
    pir_type: PirType!
    description: String
    pir_rescan_days: Int!
    pir_criteria: [PirCriterion!]!
    pir_filters: String!
    lastEventId: String!
    authorizedMembers: [MemberAccess!]!
    currentUserAccessRight: String
    pirContainers(
        first: Int
        after: ID
        orderBy: ContainersOrdering
        orderMode: OrderingMode
        filters: FilterGroup
        search: String
    ): ContainerConnection
}

# Ordering
enum PirOrdering {
    name
    created_at
    updated_at
    creator
}

# Relay connections
type PirConnection {
    pageInfo: PageInfo!
    edges: [PirEdge!]!
}
type PirEdge {
    cursor: String!
    node: Pir!
}

# Queries
type Query {
    pir(id: ID!): Pir @auth(for: [PIRAPI])
    pirs(
        first: Int
        after: ID
        orderBy: PirOrdering
        orderMode: OrderingMode
        filters: FilterGroup
        search: String
    ): PirConnection @auth(for: [PIRAPI])
}

# Mutations inputs
input PirCriterionInput {
    weight: Int!
    filters: FilterGroup!
}

# Used in StixRefRelationshipAddInput
input PirDependencyInput {
    element_id: ID!
    author_id: ID
}
input PirExplanationInput {
    dependencies: [PirDependencyInput!]!
    criterion: PirCriterionInput!
}

input PirAddInput {
    name: String! @constraint(minLength: 2, format: "not-blank")
    pir_type: PirType!
    description: String
    pir_rescan_days: Int!
    pir_criteria: [PirCriterionInput!]!
    pir_filters: FilterGroup!
    authorized_members: [MemberAccessInput!]
}

input PirFlagElementInput {
    relationshipId: ID!
    sourceId: ID!
    matchingCriteria: [PirCriterionInput!]!
    relationshipAuthorId: ID
}

input PirUnflagElementInput {
    relationshipId: ID!
    sourceId: ID!
}

# Mutations
type Mutation {
    pirAdd(input: PirAddInput!): Pir @auth(for: [PIRAPI_PIRUPDATE])
    pirFieldPatch(id: ID!, input: [EditInput!]!): Pir @auth(for: [PIRAPI_PIRUPDATE])
    pirEditAuthorizedMembers(id: ID!, input:[MemberAccessInput!]!): Pir @auth(for: [PIRAPI_PIRUPDATE])
    pirDelete(id: ID!): ID @auth(for: [PIRAPI_PIRUPDATE])
    pirFlagElement(id: ID!, input: PirFlagElementInput!): ID @auth(for: [BYPASS])
    pirUnflagElement(id: ID!, input: PirUnflagElementInput!): ID @auth(for: [BYPASS])
}