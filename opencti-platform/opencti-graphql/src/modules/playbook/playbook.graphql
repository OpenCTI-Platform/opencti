type PlayBookExecutionStep {
    id: ID!
    message: String
    status: String
    in_timestamp: String
    out_timestamp: String
    duration: Int
    bundle_or_patch: String
    error: String
}

type PlayBookExecution {
    id: ID!
    playbook_id: ID!
    execution_start: String
    steps: [PlayBookExecutionStep!]
}

type Playbook implements InternalObject & BasicObject {
    id: ID!
    entity_type: String!
    standard_id: String!
    parent_types: [String!]!
    # Playbook
    name: String!
    description: String
    playbook_running: Boolean
    playbook_definition: String
    last_executions: [PlayBookExecution!]
    queue_messages: Int!
    toConfigurationExport: String!
}

type PlaybookComponentPort {
    id: ID!
    type: String!
}
type PlaybookComponent {
    id: ID!
    name: String!
    description: String!
    icon: String!
    is_entry_point: Boolean
    is_internal: Boolean
    configuration_schema: String
    ports: [PlaybookComponentPort!]!
}
type PlaybookInsertResult {
    nodeId: String!
    linkId: String!
}

# Ordering
enum PlaybooksOrdering {
    name
    playbook_running
    _score
}

# Relay connections
type PlaybookConnection {
    pageInfo: PageInfo!
    edges: [PlaybookEdge!]!
}
type PlaybookEdge {
    cursor: String!
    node: Playbook!
}

# Queries
type Query {
    playbook(id: String!): Playbook @auth(for: [AUTOMATION])
    playbooks(
        first: Int
        after: ID
        orderBy: PlaybooksOrdering
        orderMode: OrderingMode
        filters: FilterGroup
        search: String
    ): PlaybookConnection @auth(for: [AUTOMATION])
    playbookComponents: [PlaybookComponent]! @auth(for: [AUTOMATION])
    playbooksForEntity(id: String!): [Playbook] @auth(for: [AUTOMATION])
}

input PlaybookAddInput {
    name: String! @constraint(minLength: 2, format: "not-blank")
    description: String
}

input PositionInput {
    x: Float!
    y: Float!
}

input PlaybookAddNodeInput {
    name: String! @constraint(minLength: 2, format: "not-blank")
    component_id: String!
    position: PositionInput!
    configuration: String
}

input PlaybookAddLinkInput {
    from_node: String!
    from_port: String!
    to_node: String!
}

# Mutations
type Mutation {
    playbookAdd(input: PlaybookAddInput!): Playbook @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookAddNode(id: ID!, input: PlaybookAddNodeInput!): String! @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookReplaceNode(id: ID!, nodeId: ID!, input: PlaybookAddNodeInput!): String! @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookInsertNode(id: ID!, parentNodeId: ID!, parentPortId: ID!, childNodeId: ID!, input: PlaybookAddNodeInput!): PlaybookInsertResult! @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookAddLink(id: ID!, input: PlaybookAddLinkInput!): String! @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookDelete(id: ID!): ID @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookDeleteNode(id: ID!, nodeId: ID!): Playbook @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookDeleteLink(id: ID!, linkId: ID!): Playbook @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookUpdatePositions(id: ID!, positions: String!): ID @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookImport(file: Upload!): String! @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookDuplicate(id: ID!): String! @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookFieldPatch(id: ID!, input: [EditInput!]!, commitMessage: String, references: [String]): Playbook @auth(for: [AUTOMATION_AUTOMATIONMANAGE])
    playbookStepExecution(execution_id: ID!, event_id: ID!, execution_start: DateTime!, data_instance_id: ID!, playbook_id: ID!, previous_step_id: ID!, step_id: ID!, previous_bundle: String!, bundle: String!): Boolean @auth(for: [CONNECTORAPI])
    playbookExecute(id: ID!, entityId: String!): Boolean @auth(for: [AUTOMATION])
}
