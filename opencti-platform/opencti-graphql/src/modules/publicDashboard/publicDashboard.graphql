type PublicDashboard implements InternalObject & BasicObject {
  id: ID!
  entity_type: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  standard_id: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  parent_types: [String!]!
  metrics:[Metric] @auth(for: [KNOWLEDGE, EXPLORE])
  # PublicDashboard
  name: String!
  owner: Creator @auth(for: [KNOWLEDGE, EXPLORE])
  description: String
  dashboard_id: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  dashboard: Workspace! @auth(for: [KNOWLEDGE, EXPLORE])
  user_id: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  public_manifest: String
  private_manifest: String @auth(for: [KNOWLEDGE, EXPLORE])
  uri_key: String!
  allowed_markings_ids: [String!]  @auth(for: [KNOWLEDGE, EXPLORE])
  allowed_markings: [MarkingDefinitionShort!]  @auth(for: [KNOWLEDGE, EXPLORE])
  created_at: DateTime @auth(for: [KNOWLEDGE, EXPLORE])
  updated_at: DateTime @auth(for: [KNOWLEDGE, EXPLORE])
  editContext: [EditUserContext!]  @auth(for: [KNOWLEDGE, EXPLORE])
  enabled: Boolean!
}

type PublicDistribution {
  label: String!
  entity: StixObjectOrStixRelationshipOrCreator
  value: Int
  breakdownDistribution: [Distribution]
}

# Ordering
enum PublicDashboardsOrdering {
  name
  created_at
  updated_at
  user_id
  enabled
  dashboard
  uri_key
  _score
}

# Relay connections
type PublicDashboardConnection {
  pageInfo: PageInfo!
  edges: [PublicDashboardEdge!]!
}

# Queries
type Query {
  publicDashboard(id: String!): PublicDashboard  @auth(for: [EXPLORE])
  publicDashboards(
    first: Int
    after: ID
    orderBy: PublicDashboardsOrdering
    orderMode: OrderingMode
    filters: FilterGroup
    search: String
  ): PublicDashboardConnection @auth(for: [EXPLORE])
  publicDashboardByUriKey(uri_key: String!): PublicDashboard @public
  publicStixCoreObjectsNumber(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): Number @public
  publicStixRelationshipsNumber(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): Number @public
  publicStixCoreObjectsMultiTimeSeries(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): [MultiTimeSeries] @public
  publicStixRelationshipsMultiTimeSeries(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): [MultiTimeSeries] @public
  publicStixCoreObjectsDistribution(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): [PublicDistribution] @public
  publicStixRelationshipsDistribution(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): [PublicDistribution] @public
  publicBookmarks(
    uriKey: String!
    widgetId : String!
  ): StixDomainObjectConnection @public
  publicStixCoreObjects(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): StixCoreObjectConnection @public
  publicStixRelationships(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
  ): StixRelationshipConnection @public
}

type PublicDashboardEdge {
  cursor: String!
  node: PublicDashboard!
}

# Mutation
input PublicDashboardAddInput {
  name: String! @constraint(minLength: 2, format: "not-blank")
  uri_key: String!
  description: String
  dashboard_id: String!
  allowed_markings_ids: [String!]
  enabled: Boolean!
}

type Mutation {
  publicDashboardAdd(input: PublicDashboardAddInput!): PublicDashboard @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
  publicDashboardDelete(id: ID!): ID @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
  publicDashboardFieldPatch(id: ID!, input: [EditInput!]!): PublicDashboard @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
}

