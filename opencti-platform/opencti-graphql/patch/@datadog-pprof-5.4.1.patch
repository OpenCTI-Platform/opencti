diff --git a/out/src/time-profiler-bindings.js b/out/src/time-profiler-bindings.js
index d6d3f23..b7da0d7 100644
--- a/out/src/time-profiler-bindings.js
+++ b/out/src/time-profiler-bindings.js
@@ -18,7 +18,7 @@ exports.getNativeThreadId = exports.constants = exports.TimeProfiler = void 0;
  */
 const path_1 = require("path");
 const findBinding = require('node-gyp-build');
-const profiler = findBinding((0, path_1.join)(__dirname, '..', '..'));
+const profiler = findBinding((0, path_1.join)(__dirname, '..', 'build'));
 exports.TimeProfiler = profiler.TimeProfiler;
 exports.constants = profiler.constants;
 exports.getNativeThreadId = profiler.getNativeThreadId;
diff --git a/out/src/heap-profiler-bindings.js b/out/src/heap-profiler-bindings.js
index 25157fb..8838bec 100644
--- a/out/src/heap-profiler-bindings.js
+++ b/out/src/heap-profiler-bindings.js
@@ -41,7 +41,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.monitorOutOfMemory = exports.getAllocationProfile = exports.stopSamplingHeapProfiler = exports.startSamplingHeapProfiler = void 0;
 const path = __importStar(require("path"));
 const findBinding = require('node-gyp-build');
-const profiler = findBinding(path.join(__dirname, '..', '..'));
+const profiler = findBinding(path.join(__dirname, '..', 'build'));
 // Wrappers around native heap profiler functions.
 function startSamplingHeapProfiler(heapIntervalBytes, heapStackDepth) {
     profiler.heapProfiler.startSamplingHeapProfiler(heapIntervalBytes, heapStackDepth);