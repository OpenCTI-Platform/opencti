import { graphql, PreloadedQuery, usePreloadedQuery } from 'react-relay';
import React from 'react';
import Alert from '@mui/material/Alert';
import parse from 'html-react-parser';
import { AISummaryHistoryQuery } from './__generated__/AISummaryHistoryQuery.graphql';
import useQueryLoading from '../../../../utils/hooks/useQueryLoading';
import { useFormatter } from '../../../../components/i18n';
import Loader, { LoaderVariant } from '../../../../components/Loader';

const aISummaryHistoryQuery = graphql`
  query AISummaryHistoryQuery($id: ID!) {
      stixCoreObjectAiHistory(id: $id) {
        result
        updated_at
    }
  }
`;

interface AISummaryHistoryComponentProps {
  queryRef: PreloadedQuery<AISummaryHistoryQuery>;
}

const AISummaryHistoryComponent = ({ queryRef }: AISummaryHistoryComponentProps) => {
  const { t_i18n } = useFormatter();
  const { stixCoreObjectAiHistory } = usePreloadedQuery(
    aISummaryHistoryQuery,
    queryRef,
  );
  if (stixCoreObjectAiHistory && stixCoreObjectAiHistory.result) {
    return (
      <>
        <Alert severity="info" variant="outlined" style={{ marginTop: 10 }}>
          {t_i18n('This summary is based on the history of this entity (internal activity). It has been generated by AI and can contain mistakes.')}
        </Alert>
        {parse(stixCoreObjectAiHistory.result)}
      </>
    );
  }
  return (
    <div
      style={{
        display: 'table',
        height: '100%',
        width: '100%',
        paddingTop: 15,
        paddingBottom: 15,
      }}
    >
      <span
        style={{
          display: 'table-cell',
          verticalAlign: 'middle',
          textAlign: 'center',
        }}
      >
        {t_i18n('No AI Intelligence.')}
      </span>
    </div>
  );
};

interface AISummaryHistoryProps {
  id: string
}

const AISummaryHistory = ({ id }: AISummaryHistoryProps) => {
  const queryRef = useQueryLoading<AISummaryHistoryQuery>(aISummaryHistoryQuery, { id });
  return (
    <>
      {queryRef ? (
        <React.Suspense fallback={<Loader variant={LoaderVariant.inElement} />}>
          <AISummaryHistoryComponent queryRef={queryRef} />
        </React.Suspense>
      ) : (
        <Loader variant={LoaderVariant.inElement} />
      )}
    </>
  );
};

export default AISummaryHistory;
