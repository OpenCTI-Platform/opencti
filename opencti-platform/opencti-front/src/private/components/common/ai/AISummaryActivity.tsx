import { graphql, PreloadedQuery, usePreloadedQuery } from 'react-relay';
import React from 'react';
import Alert from '@mui/material/Alert';
import { AISummaryActivityQuery } from './__generated__/AISummaryActivityQuery.graphql';
import useQueryLoading from '../../../../utils/hooks/useQueryLoading';
import { useFormatter } from '../../../../components/i18n';
import Loader, { LoaderVariant } from '../../../../components/Loader';
import MarkdownDisplay from '../../../../components/MarkdownDisplay';

const aISummaryActivityQuery = graphql`
  query AISummaryActivityQuery($id: ID!) {
      stixCoreObjectAiActivity(id: $id) {
        result
        updated_at
    }
  }
`;

interface AISummaryActivityComponentProps {
  queryRef: PreloadedQuery<AISummaryActivityQuery>;
}

const AISummaryActivityComponent = ({ queryRef }: AISummaryActivityComponentProps) => {
  const { t_i18n } = useFormatter();
  const { stixCoreObjectAiActivity } = usePreloadedQuery(
    aISummaryActivityQuery,
    queryRef,
  );
  if (stixCoreObjectAiActivity && stixCoreObjectAiActivity.result) {
    return (
      <>
        <Alert severity="info" variant="outlined">
          {t_i18n('This summary is based on the evolution of the activity of this entity (indicators, victimology, etc.). It has been generated by AI and can contain mistakes.')}
        </Alert>
        <MarkdownDisplay
          content={stixCoreObjectAiActivity.result}
          remarkGfmPlugin={true}
          commonmark={true}
          removeLinks={false}
        />
      </>
    );
  }

  return (
    <div
      style={{
        display: 'table',
        height: '100%',
        width: '100%',
        paddingTop: 15,
        paddingBottom: 15,
      }}
    >
      <span
        style={{
          display: 'table-cell',
          verticalAlign: 'middle',
          textAlign: 'center',
        }}
      >
        {t_i18n('No AI Intelligence.')}
      </span>
    </div>
  );
};

interface AISummaryActivityProps {
  id: string
}

const AISummaryActivity = ({ id }: AISummaryActivityProps) => {
  const queryRef = useQueryLoading<AISummaryActivityQuery>(aISummaryActivityQuery, { id });
  return (
    <>
      {queryRef ? (
        <React.Suspense fallback={<Loader variant={LoaderVariant.inElement} />}>
          <AISummaryActivityComponent queryRef={queryRef} />
        </React.Suspense>
      ) : (
        <Loader variant={LoaderVariant.inElement} />
      )}
    </>
  );
};

export default AISummaryActivity;
