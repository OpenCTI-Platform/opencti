import { graphql, PreloadedQuery, usePreloadedQuery } from 'react-relay';
import React from 'react';
import parse from 'html-react-parser';
import Grid from '@mui/material/Grid';
import Chip from '@mui/material/Chip';
import Alert from '@mui/material/Alert';
import { AISummaryContainersQuery } from './__generated__/AISummaryContainersQuery.graphql';
import useQueryLoading from '../../../../utils/hooks/useQueryLoading';
import { useFormatter } from '../../../../components/i18n';
import Loader, { LoaderVariant } from '../../../../components/Loader';
import { FilterGroup, handleFilterHelpers } from '../../../../utils/filters/filtersHelpers-types';
import FilterIconButton from '../../../../components/FilterIconButton';

const aISummaryContainersQuery = graphql`
  query AISummaryContainersQuery(
    $first: Int
    $orderBy: ContainersOrdering
    $orderMode: OrderingMode
    $filters: FilterGroup
    $search: String
  ) {
    containersAiSummary(
      first: $first
      orderBy: $orderBy,
      orderMode: $orderMode
      filters: $filters
      search: $search
    ) {
      result
      topics
    }
  }
`;

interface AISummaryContainersComponentProps {
  stixCoreObjectId?: string;
  queryRef: PreloadedQuery<AISummaryContainersQuery>;
  filters: FilterGroup;
  first: number;
}

const AISummaryContainersComponent = ({ first, queryRef, filters }: AISummaryContainersComponentProps) => {
  const { t_i18n } = useFormatter();
  const { containersAiSummary } = usePreloadedQuery(
    aISummaryContainersQuery,
    queryRef,
  );
  if (containersAiSummary && containersAiSummary.result) {
    return (
      <>
        <Alert severity="info" variant="outlined" style={{ marginTop: 10 }}>
          {t_i18n('This summary is based on the whole content of related containers (description, content and attached files). It has been generated by AI and can contain mistakes.')}
        </Alert>
        <Grid
          container={true}
          spacing={3}
          style={{ marginBottom: 20 }}
        >
          <Grid item={true} xs={9}>
            <FilterIconButton
              filters={filters}
              styleNumber={2}
              redirection={true}
            />
          </Grid>
          <Grid item={true} xs={3}>
            <Chip
              size="small"
              label={`${t_i18n('Last')} ${first} ${t_i18n('element(s)')}`}
              style={{ borderRadius: 4, height: 32, float: 'right', marginTop: 8 }}
            />
          </Grid>
        </Grid>
        {parse(containersAiSummary.result)}
      </>
    );
  }
  return (
    <div
      style={{
        display: 'table',
        height: '100%',
        width: '100%',
        paddingTop: 15,
        paddingBottom: 15,
      }}
    >
      <span
        style={{
          display: 'table-cell',
          verticalAlign: 'middle',
          textAlign: 'center',
        }}
      >
        {t_i18n('No containers about this entity.')}
      </span>
    </div>
  );
};

interface ContainersAiSummaryProps {
  first: number
  filters: FilterGroup
  helpers: handleFilterHelpers
}

const AISummaryContainers = ({ first, filters, helpers }: ContainersAiSummaryProps) => {
  const queryRef = useQueryLoading<AISummaryContainersQuery>(
    aISummaryContainersQuery,
    {
      first,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore Excepts readonly array as variables but have simple array.
      filters,
      orderBy: 'created',
      orderMode: 'desc',
    },
  );
  return (
    <>
      {queryRef ? (
        <React.Suspense fallback={<Loader variant={LoaderVariant.inElement} />}>
          <AISummaryContainersComponent first={first} queryRef={queryRef} filters={filters}/>
        </React.Suspense>
      ) : (
        <Loader variant={LoaderVariant.inElement} />
      )}
    </>
  );
};

export default AISummaryContainers;
