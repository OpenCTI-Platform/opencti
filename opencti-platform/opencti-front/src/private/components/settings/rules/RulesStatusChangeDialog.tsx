import React from 'react';
import DialogContent from '@mui/material/DialogContent';
import Alert from '@mui/material/Alert';
import DialogActions from '@mui/material/DialogActions';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import { useTheme } from '@mui/material/styles';
import { graphql } from 'react-relay';
import Transition from '../../../../components/Transition';
import type { Theme } from '../../../../components/Theme';
import { useFormatter } from '../../../../components/i18n';
import useApiMutation from '../../../../utils/hooks/useApiMutation';
import { MESSAGING$ } from '../../../../relay/environment';

const ruleActivationMutation = graphql`
  mutation RulesStatusChangeDialogActivationMutation($id: ID!, $enable: Boolean!) {
    ruleSetActivation(id: $id, enable: $enable) {
      id
    }
  }
`;

interface Labels {
  confirm: string
  description: string
}
interface RuleLabels {
  enable: Labels
  disable: Labels
}

export interface RulesStatusChangeDialogProps {
  ruleId?: string
  status: 'enable' | 'disable' | undefined
  changeStatus: (s: 'enable' | 'disable' | undefined) => void
}

const RulesStatusChangeDialog = ({
  ruleId,
  status,
  changeStatus,
}: RulesStatusChangeDialogProps) => {
  const theme = useTheme<Theme>();
  const { t_i18n } = useFormatter();

  const [mutateActivation, processing] = useApiMutation(ruleActivationMutation);

  const labels: RuleLabels = {
    enable: {
      confirm: t_i18n('The rule has been enabled, rescan of platform data launched...'),
      description: t_i18n('Activating this rule will automatically generate new relationships on your existing and future data. Please be aware that enabling this rule may impact your platform\'s data and performance.'),
    },
    disable: {
      confirm: t_i18n('The rule has been disabled, clean-up launched...'),
      description: t_i18n('Deactivating this rule will automatically remove the relationships previously generated by the rule. Please be aware that disabling this rule may impact your platform\'s data and performance.'),
    },
  };

  const close = () => changeStatus(undefined);

  const submit = () => {
    if (ruleId && status) {
      mutateActivation({
        variables: {
          id: ruleId,
          enable: status === 'enable',
        },
        onCompleted: () => {
          MESSAGING$.notifySuccess(labels[status].confirm);
          close();
        },
      });
    }
  };

  return (
    <Dialog
      keepMounted
      open={status !== undefined}
      slotProps={{ paper: { elevation: 1 } }}
      slots={{ transition: Transition }}
      onClose={close}
    >
      <DialogContent>
        <Alert
          severity="warning"
          variant="outlined"
          color="dangerZone"
          style={{ borderColor: theme.palette.dangerZone.main }}
        >
          {status && labels[status].description}
        </Alert>
      </DialogContent>
      <DialogActions>
        <Button onClick={close} disabled={processing}>
          {t_i18n('Cancel')}
        </Button>
        <Button onClick={submit} color="secondary" disabled={processing}>
          {t_i18n('Enable')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default RulesStatusChangeDialog;
