import React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';
import { useTheme } from '@mui/styles';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import { VulnerabilityDetails_vulnerability$data } from '@components/arsenal/vulnerabilities/__generated__/VulnerabilityDetails_vulnerability.graphql';
import type { Theme } from '../../../../components/Theme';
import { useFormatter } from '../../../../components/i18n';
import VulnerabilitySoftwares from './VulnerabilitySoftwares';
import ExpandableMarkdown from '../../../../components/ExpandableMarkdown';
import { emptyFilled } from '../../../../utils/String';
import ItemBoolean from '../../../../components/ItemBoolean';
import FieldOrEmpty from '../../../../components/FieldOrEmpty';
import ItemSeverity from '../../../../components/ItemSeverity';
import ItemCvssScore from '../../../../components/ItemCvssScore';

type VulnerabilityDetailsProps = {
  vulnerability: VulnerabilityDetails_vulnerability$data
};

const VulnerabilityDetailsComponent = ({ vulnerability }: VulnerabilityDetailsProps) => {
  const theme = useTheme<Theme>();
  const { t_i18n } = useFormatter();

  return (
    <div style={{ height: '100%' }}>
      <Typography variant="h4" >
        {t_i18n('Details')}
      </Typography>
      <Paper sx={{
        marginTop: theme.spacing(1),
        padding: theme.spacing(2),
      }}
        className={'paper-for-grid'}
        variant="outlined"
      >
        <Typography variant="h3" gutterBottom={true}>
          {t_i18n('Description')}
        </Typography>
        <ExpandableMarkdown source={vulnerability.description} limit={400} />
        <Grid container={true} spacing={3}>
          <Grid item xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Score')}
            </Typography>
            <ItemCvssScore
              score={vulnerability.x_opencti_cvss_base_score}
            />
          </Grid>
          <Grid item xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Severity')}
            </Typography>
            <ItemSeverity
              severity={vulnerability.x_opencti_cvss_base_severity}
              label={vulnerability.x_opencti_cvss_base_severity || t_i18n('Unknown')}
            />
          </Grid>
        </Grid>
        <Grid container={true} spacing={3}>
          <Grid item xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Availability impact (A)')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_cvss_availability_impact)}</pre>
          </Grid>
          <Grid item xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Integrity impact (I)')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_cvss_integrity_impact)}</pre>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="h3" gutterBottom={true}>
              {t_i18n('CVSS3 - Confidentiality impact (C)')}
            </Typography>
            <pre>
              {emptyFilled(vulnerability.x_opencti_cvss_confidentiality_impact)}
            </pre>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="h3" gutterBottom={true}>
              {t_i18n('CVSS3 - Attack vector (AV)')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_cvss_attack_vector)}</pre>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="h3" gutterBottom={true}>
              {t_i18n('EPSS Score')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_epss_score)}</pre>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="h3" gutterBottom={true}>
              {t_i18n('EPSS Percentile')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_epss_percentile)}</pre>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="h3" gutterBottom={true}>
              {t_i18n('CISA KEV')}
            </Typography>
            <FieldOrEmpty source={vulnerability.x_opencti_cisa_kev}>
              <ItemBoolean
                status={vulnerability.x_opencti_cisa_kev}
                label={vulnerability.x_opencti_cisa_kev ? t_i18n('Yes') : t_i18n('No')}
                reverse={true}
              />
            </FieldOrEmpty>
          </Grid>
        </Grid>
        <VulnerabilitySoftwares vulnerability={vulnerability} />
      </Paper>
    </div>
  );
};

const VulnerabilityDetails = createFragmentContainer(
  VulnerabilityDetailsComponent,
  {
    vulnerability: graphql`
      fragment VulnerabilityDetails_vulnerability on Vulnerability {
        id
        x_opencti_cvss_base_score
        x_opencti_cvss_base_severity
        x_opencti_cvss_attack_vector
        x_opencti_cvss_integrity_impact
        x_opencti_cvss_availability_impact
        x_opencti_cvss_confidentiality_impact
        x_opencti_cisa_kev
        x_opencti_epss_score
        x_opencti_epss_percentile
        description
        ...VulnerabilitySoftwares_vulnerability
      }
    `,
  },
);

export default VulnerabilityDetails;
