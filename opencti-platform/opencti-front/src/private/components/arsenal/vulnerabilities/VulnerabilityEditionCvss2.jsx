import React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';
import { Field, Form, Formik } from 'formik';
import * as Yup from 'yup';
import { useTheme } from '@mui/styles';
import { vulnerabilityEditionOverviewFocus, vulnerabilityMutationRelationAdd, vulnerabilityMutationRelationDelete } from './VulnerabilityEditionOverview';
import { useFormatter } from '../../../../components/i18n';
import TextField from '../../../../components/TextField';
import { SubscriptionFocus } from '../../../../components/Subscription';
import { adaptFieldValue } from '../../../../utils/String';
import CommitMessage from '../../common/form/CommitMessage';
import { fieldSpacingContainerStyle } from '../../../../utils/field';
import useFormEditor from '../../../../utils/hooks/useFormEditor';
import { useSchemaEditionValidation } from '../../../../utils/hooks/useEntitySettings';
import AlertConfidenceForEntity from '../../../../components/AlertConfidenceForEntity';

const vulnerabilityMutationFieldPatch = graphql`
  mutation VulnerabilityEditionCvss2FieldPatchMutation(
    $id: ID!
    $input: [EditInput]!
    $commitMessage: String
    $references: [String]
  ) {
    vulnerabilityEdit(id: $id) {
      fieldPatch(
        input: $input
        commitMessage: $commitMessage
        references: $references
      ) {
        ...VulnerabilityEditionCvss2_vulnerability
        ...Vulnerability_vulnerability
      }
    }
  }
`;

const VulnerabilityEditionCvss2Component = (props) => {
  const { vulnerability, enableReferences, context, handleClose } = props;
  const { t_i18n } = useFormatter();
  const theme = useTheme();

  const basicShape = {
    x_opencti_cvss_v2_vector_string: Yup.string().nullable(),
    x_opencti_cvss_v2_base_score: Yup.number().min(0).max(10).nullable(),
    x_opencti_cvss_v2_access_vector: Yup.string().nullable(),
    x_opencti_cvss_v2_access_complexity: Yup.string().nullable(),
    x_opencti_cvss_v2_authentication: Yup.string().nullable(),
    x_opencti_cvss_v2_confidentiality_impact: Yup.string().nullable(),
    x_opencti_cvss_v2_integrity_impact: Yup.string().nullable(),
    x_opencti_cvss_v2_availability_impact: Yup.string().nullable(),
    x_opencti_cvss_v2_exploitability: Yup.string().nullable(),
    x_opencti_cvss_v2_remediation_level: Yup.string().nullable(),
    x_opencti_cvss_v2_report_confidence: Yup.string().nullable(),
    x_opencti_cvss_v2_temporal_score: Yup.number().min(0).max(10).nullable(),
  };

  const vulnerabilityValidator = useSchemaEditionValidation('vulnerability', basicShape);

  const queries = {
    fieldPatch: vulnerabilityMutationFieldPatch,
    relationAdd: vulnerabilityMutationRelationAdd,
    relationDelete: vulnerabilityMutationRelationDelete,
    editionFocus: vulnerabilityEditionOverviewFocus,
  };

  const editor = useFormEditor(
    vulnerability,
    enableReferences,
    queries,
    vulnerabilityValidator,
  );

  const onSubmit = (values, { setSubmitting }) => {
    const { message, references, ...otherValues } = values;
    const commitMessage = message ?? '';
    const commitReferences = (references ?? []).map(({ value }) => value);
    const inputValues = Object.entries({
      ...otherValues,
      createdBy: values.createdBy?.value,
      x_opencti_cvss_v2_base_score: parseFloat(values.x_opencti_cvss_v2_base_score),
      x_opencti_cvss_v2_temporal_score: parseFloat(values.x_opencti_cvss_v2_temporal_score),
      x_opencti_workflow_id: values.x_opencti_workflow_id?.value,
      objectMarking: (values.objectMarking ?? []).map(({ value }) => value),
    }).map(([key, value]) => ({ key, value: adaptFieldValue(value) }));
    editor.fieldPatch({
      variables: {
        id: vulnerability.id,
        input: inputValues,
        commitMessage:
          commitMessage && commitMessage.length > 0 ? commitMessage : null,
        references: commitReferences,
      },
      setSubmitting,
      onCompleted: () => {
        setSubmitting(false);
        handleClose();
      },
    });
  };

  const handleSubmitField = (name, value) => {
    if (!enableReferences) {
      vulnerabilityValidator
        .validateAt(name, { [name]: value })
        .then(() => {
          editor.fieldPatch({
            variables: {
              id: vulnerability.id,
              input: [{ key: name, value: value ?? [null] }],
            },
          });
        })
        .catch((error) => error);
    }
  };

  const initialValues = {
    x_opencti_cvss_v2_vector_string: vulnerability.x_opencti_cvss_v2_vector_string,
    x_opencti_cvss_v2_base_score: vulnerability.x_opencti_cvss_v2_base_score,
    x_opencti_cvss_v2_access_vector: vulnerability.x_opencti_cvss_v2_access_vector,
    x_opencti_cvss_v2_access_complexity: vulnerability.x_opencti_cvss_v2_access_complexity,
    x_opencti_cvss_v2_authentication: vulnerability.x_opencti_cvss_v2_authentication,
    x_opencti_cvss_v2_confidentiality_impact: vulnerability.x_opencti_cvss_v2_confidentiality_impact,
    x_opencti_cvss_v2_integrity_impact: vulnerability.x_opencti_cvss_v2_integrity_impact,
    x_opencti_cvss_v2_availability_impact: vulnerability.x_opencti_cvss_v2_availability_impact,
    x_opencti_cvss_v2_exploitability: vulnerability.x_opencti_cvss_v2_exploitability,
    x_opencti_cvss_v2_remediation_level: vulnerability.x_opencti_cvss_v2_remediation_level,
    x_opencti_cvss_v2_report_confidence: vulnerability.x_opencti_cvss_v2_report_confidence,
    x_opencti_cvss_v2_temporal_score: vulnerability.x_opencti_cvss_v2_temporal_score,
  };

  return (
    <Formik
      enableReinitialize={true}
      initialValues={initialValues}
      validationSchema={vulnerabilityValidator}
      onSubmit={onSubmit}
    >
      {({
        submitForm,
        isSubmitting,
        setFieldValue,
        values,
        isValid,
        dirty,
      }) => (
        <Form style={{ marginTop: theme.spacing(2) }}>
          <AlertConfidenceForEntity entity={vulnerability} />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_vector_string"
            label={t_i18n('CVSS2 Vector')}
            fullWidth={true}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_vector_string"
              />
              }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_base_score"
            label={t_i18n('CVSS2 Score')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            type="number"
            step="0.1"
            onFocus={editor.changeFocus}
            onSubmit={(name, value) => handleSubmitField(name, (value === '' ? null : value))}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_base_score"
              />
            }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_access_vector"
            label={t_i18n('CVSS2 Access Vector (AV)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_access_vector"
              />
              }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_access_complexity"
            label={t_i18n('CVSS2 Access Complexity (AC)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_access_complexity"
              />
              }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_authentication"
            label={t_i18n('CVSS2 Authentication (Au)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_authentication"
              />
              }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_confidentiality_impact"
            label={t_i18n('CVSS2 Confidentiality Impact (C)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_confidentiality_impact"
              />
              }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_integrity_impact"
            label={t_i18n('CVSS2 Integrity Impact (I)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_integrity_impact"
              />
              }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_availability_impact"
            label={t_i18n('CVSS2 Availability Impact (A)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_availability_impact"
              />
            }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_exploitability"
            label={t_i18n('CVSS2 Exploitability (E)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_exploitability"
              />
            }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_remediation_level"
            label={t_i18n('CVSS2 Remediation Level (RL)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_remediation_level"
              />
            }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_report_confidence"
            label={t_i18n('CVSS2 Report Confidence (RC)')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            onFocus={editor.changeFocus}
            onSubmit={handleSubmitField}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_report_confidence"
              />
            }
          />
          <Field
            component={TextField}
            variant="standard"
            name="x_opencti_cvss_v2_temporal_score"
            label={t_i18n('CVSS2 Temporal Score')}
            fullWidth={true}
            style={fieldSpacingContainerStyle}
            type="number"
            step="0.1"
            onFocus={editor.changeFocus}
            onSubmit={(name, value) => handleSubmitField(name, (value === '' ? null : value))}
            helperText={
              <SubscriptionFocus
                context={context}
                fieldName="x_opencti_cvss_v2_temporal_score"
              />
              }
          />
          {enableReferences && (
            <CommitMessage
              submitForm={submitForm}
              disabled={isSubmitting || !isValid || !dirty}
              setFieldValue={setFieldValue}
              open={false}
              values={values.references}
              id={vulnerability.id}
            />
          )}
        </Form>
      )}
    </Formik>
  );
};

export default createFragmentContainer(VulnerabilityEditionCvss2Component, {
  vulnerability: graphql`
      fragment VulnerabilityEditionCvss2_vulnerability on Vulnerability {
        id
        x_opencti_cvss_v2_vector_string
        x_opencti_cvss_v2_base_score
        x_opencti_cvss_v2_access_vector
        x_opencti_cvss_v2_access_complexity
        x_opencti_cvss_v2_authentication
        x_opencti_cvss_v2_confidentiality_impact
        x_opencti_cvss_v2_integrity_impact
        x_opencti_cvss_v2_availability_impact
        x_opencti_cvss_v2_exploitability
        x_opencti_cvss_v2_remediation_level
        x_opencti_cvss_v2_report_confidence
        x_opencti_cvss_v2_temporal_score
        confidence
        entity_type
      }
    `,
});
